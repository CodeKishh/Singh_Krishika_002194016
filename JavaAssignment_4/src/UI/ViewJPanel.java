/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.PEncounter;
import Model.PEncounterHistory;
import Model.PHouse;
import Model.PVitalSigns;
import Model.PatientInfo;
import Model.PatientInfoHistory;
import Model.Person;
import Model.PersonInfoHistory;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krish
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    
    PersonInfoHistory history;
    PatientInfoHistory phistory;
    PEncounterHistory eHistory;
    
    
    public ViewJPanel(PersonInfoHistory history, PatientInfoHistory phistory, PEncounterHistory eHistory) {
        initComponents();
        this.history = history;
        this.phistory = phistory;
        this.eHistory = eHistory;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblCom = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblContact = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblAddress2 = new javax.swing.JLabel();
        txtAddress2 = new javax.swing.JTextField();
        lblZip = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        txtCheckBP = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        cBcCity = new javax.swing.JComboBox<>();
        cBcCom = new javax.swing.JComboBox<>();
        cBcHouse = new javax.swing.JComboBox<>();
        Checkbtn = new javax.swing.JButton();
        lblViewDetailedinfo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMain1 = new javax.swing.JTable();

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Vehicle Information");

        lblTitle1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("View Person Information");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblName.setText("Name");

        lblCity.setText("City");

        lblCom.setText("Community");

        lblHouse.setText("House number");

        lblID.setText("ID");

        lblAge.setText("Age");

        lblContact.setText("Contact No.");

        lblAddress.setText("Address line 1");

        lblAddress2.setText("Address line 2");

        lblZip.setText("Zip Code");

        txtCheckBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCheckBPActionPerformed(evt);
            }
        });

        tblMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Patient ID", "Age", "Contact No.", "House No.", "Zip Code", "Normal/Abnormal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMain);
        if (tblMain.getColumnModel().getColumnCount() > 0) {
            tblMain.getColumnModel().getColumn(5).setResizable(false);
        }

        cBcCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Boston" }));
        cBcCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBcCityActionPerformed(evt);
            }
        });

        cBcCom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cBcCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBcComActionPerformed(evt);
            }
        });

        Checkbtn.setText("Enter Encounter");
        Checkbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCom, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cBcCity, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cBcCom, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cBcHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 22, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtID)))
                        .addGap(88, 88, 88)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblZip, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(Checkbtn)
                        .addGap(18, 18, 18)
                        .addComponent(txtCheckBP, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cBcCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCom, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cBcCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cBcHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZip, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCheckBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Checkbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblViewDetailedinfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblViewDetailedinfo.setText("View Details");

        tblMain1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "ID", "Age", "Contact No.", "House No.", "City", "Zip Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMain1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMain1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMain1);
        if (tblMain1.getColumnModel().getColumnCount() > 0) {
            tblMain1.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnView)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(lblViewDetailedinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnView)
                        .addComponent(btnDelete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblViewDetailedinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseClicked
        //DefaultTableModel model = (DefaultTableModel) tblMain.getModel();
        //String date1 = (String) model.getValueAt(tblMain.getSelectedRow(),0);
        //txtDate.setText(date1);

        // TODO add your handling code here:
    }//GEN-LAST:event_tblMainMouseClicked

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
     int selectedRowIndex = tblMain1.getSelectedRow();
        
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select row to view");
            
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblMain1.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        
        
        txtName.setText(selectedPerson.getPersonNm());
        cBcCity.getModel().setSelectedItem(selectedPerson.getHouse().getCityNm());
        cBcCom.getModel().setSelectedItem(selectedPerson.getHouse().getCommunityNm());
        cBcHouse.getModel().setSelectedItem(selectedPerson.getHouse().getResidenceNumber());
        txtID.setText(selectedPerson.getPersonID());
        txtAge.setText(String.valueOf(selectedPerson.getAge()));
        txtContact.setText(String.valueOf(selectedPerson.getContactNo()));
        txtAddress.setText(selectedPerson.getHouse().getAddressln1());
        txtAddress2.setText(selectedPerson.getHouse().getAddressln2());
        txtZip.setText(String.valueOf(selectedPerson.getHouse().getPinCode()));
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtCheckBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCheckBPActionPerformed
        // TODO add your handling code here:
        
//        int selectedRowIndex = tblMain1.getSelectedRow();
//        Person sPerson = history.getPersonInfoHistory().get(selectedRowIndex);
//        int bp = Integer.parseInt(txtCheckBP.getText());
//        PVitalSigns vs = new PVitalSigns();
//        vs.setBp(bp);
//        PHouse house = new PHouse();
//        PatientInfo pt = new PatientInfo("","",0,0,house);
//        boolean patientIsNormal = pt.patientIsNormal(sPerson.getAge());
//        
//        if(phistory.getPatientInfoHistory().stream().filter(a->a.getPersonID().equals(sPerson.getPersonID())).collect(Collectors.toList()).size() == 0)
//        {
//        phistory.addPatient(pt);
//        pt.setPersonID(sPerson.getPersonID());
//        pt.setAge(sPerson.getAge());
//        pt.setPersonNm(sPerson.getPersonNm());
//        pt.setHouse(sPerson.getHouse());
//        pt.setPatientIsNormal(patientIsNormal);
//            System.out.println(phistory.getPatientInfoHistory().size());
//            displayPatientInfo();
//        }
    }//GEN-LAST:event_txtCheckBPActionPerformed

    private void tblMain1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMain1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblMain1MouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tblMain1.getSelectedRow();
        
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select row to delete");
            
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblMain1.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        
        history.deletePerson(selectedPerson);
        
        JOptionPane.showMessageDialog(this, "Information Deleted");
        
        populateTable();
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cBcCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBcCityActionPerformed
        // TODO add your handling code here:
      DefaultComboBoxModel model = new DefaultComboBoxModel();
        
            model.addElement("Select");
            model.addElement("Serene");
            model.addElement("Solace");
            
            
            cBcCom.setModel(model);  
        
        
    }//GEN-LAST:event_cBcCityActionPerformed

    private void cBcComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBcComActionPerformed
            DefaultComboBoxModel model = new DefaultComboBoxModel();
        if(cBcCom.getSelectedItem().toString() == "Serene")
        {
            model.addElement("1");
            model.addElement("2");
            model.addElement("3");
            
    }                                      
    
        else if (cBcCom.getSelectedItem().toString() == "Solace")
        {
            model.addElement("1");
            model.addElement("2");
            model.addElement("3");
        }
        
        cBcHouse.setModel(model);        // TODO add your handling code here:
    }//GEN-LAST:event_cBcComActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        PHouse house = new PHouse();
        Person person = new Person("", "",0,0,house);
        int sRI = tblMain1.getSelectedRow();
        Person pi = history.getPersonInfoHistory().get(sRI);
        int selectedRowIndex = tblMain1.getSelectedRow();
        Person sPerson = history.getPersonInfoHistory().get(selectedRowIndex);
        String city = cBcCity.getSelectedItem().toString();
        String community = cBcCom.getSelectedItem().toString();
        int houseno = Integer.parseInt(cBcHouse.getSelectedItem().toString());
        
        sPerson.setPersonNm(txtName.getText());
        sPerson.setAge(Integer.parseInt(txtAge.getText()));
        house.setCityNm(city);
        house.setCommunityNm(community);
        house.setResidenceNumber(houseno);
        sPerson.setPersonID(txtID.getText());
        sPerson.setContactNo(Integer.parseInt(txtContact.getText()));
        house.setPinCode(Integer.parseInt(txtZip.getText()));
        
        sPerson.setHouse(house);
        
        populateTable();
        
        
     
        
//        DefaultComboBoxModel model = new DefaultComboBoxModel();
//        model.addElement("Serene");
//        model.addElement("Solace");
//        cBcCom.setModel(model);
//        cBcCom.setSelectedItem(pi.getHouse().getCommunityNm());
//        
//        
//        DefaultComboBoxModel model1 = new DefaultComboBoxModel();
//        if(cBcCom.getSelectedItem().toString()=="Serene"){
//        model1.addElement("1");
//        model1.addElement("2");
//        model1.addElement("3");
//        
//        }
//
//        else{
//        
//        model1.addElement("1");
//        model1.addElement("2");
//        model1.addElement("3");
//        
//        }
//        cBcHouse.setModel(model1);
//        cBcHouse.setSelectedItem(String.valueOf(pi.getHouse().getResidenceNumber()));
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void CheckbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckbtnActionPerformed
        // TODO add your handling code here:
        
        
        
        int selectedRowIndex = tblMain1.getSelectedRow();
        
       
         if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select row to view");
            
            return;
        }
        Person sPerson = history.getPersonInfoHistory().get(selectedRowIndex);
        int bp = Integer.parseInt(txtCheckBP.getText());
        PVitalSigns vs = new PVitalSigns();
        vs.setBp(bp);
        PHouse house = new PHouse();
        PatientInfo pt = new PatientInfo("","",0,0,house, vs);
        boolean patientIsNormal = pt.patientIsNormal(sPerson.getAge());
        
        if(phistory.getPatientInfoHistory().stream().filter(a->a.getPersonID().equals(sPerson.getPersonID())).collect(Collectors.toList()).size() == 0)
        {
        phistory.addPatient(pt);
        pt.setPersonID(sPerson.getPersonID());
        pt.setAge(sPerson.getAge());
        pt.setPersonNm(sPerson.getPersonNm());
        pt.setHouse(sPerson.getHouse());
        pt.setPatientIsNormal(patientIsNormal);
            //System.out.println(phistory.getPatientInfoHistory().size());
            displayPatientInfo();
        }
        
        else {
            pt = phistory.getPatientInfoHistory().stream().filter(a -> a.getPersonID() == sPerson.getPersonID()).collect(Collectors.toList()).get(0);
            pt.setPatientIsNormal(patientIsNormal);
            pt.setVs(vs);
            displayPatientInfo();
        }
        
        PEncounter pencounter = new PEncounter(vs);
        eHistory.addPEncounter(pencounter);
        pencounter.setPatientID(pt.getPatientId());
        pencounter.setDateStamp(LocalDateTime.now());
        pencounter.setPatientIsNormal(pt.isPatientIsNormal());
        pencounter.setVits(vs);
        pencounter.setpID(pt);
        
    }//GEN-LAST:event_CheckbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Checkbtn;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cBcCity;
    private javax.swing.JComboBox<String> cBcCom;
    private javax.swing.JComboBox<String> cBcHouse;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCom;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblHouse;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblViewDetailedinfo;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTable tblMain;
    private javax.swing.JTable tblMain1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAddress2;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCheckBP;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
       
        DefaultTableModel model = (DefaultTableModel) tblMain1.getModel();
        model.setRowCount(0);
        
        for (Person pi : history.getPersonInfoHistory()){
        
            
            Object[] row = new Object[8];
            row[0] = pi;
            row[1] = pi.getPersonID();
            row[2] = pi.getAge();
            row[3] = pi.getContactNo();
            row[4] = pi.getHouse().getResidenceNumber();
            row[5] = pi.getHouse().getCityNm();
            row[6] = pi.getHouse().getPinCode();
            
            
            model.addRow(row);
    
}
    }

    private void displayPatientInfo() {
        
      DefaultTableModel model = (DefaultTableModel) tblMain.getModel();
      model.setRowCount(0);
      
      for(PatientInfo pi : phistory.getPatientInfoHistory()){
          Object[] row = new Object[7];
          row[0] = pi.getPersonNm();
          row[1] = pi.getPersonID();
          row[2] = pi.getAge();
          row[3] = pi.getContactNo();
          row[4] = pi.getHouse().getResidenceNumber();
          row[5] = pi.getHouse().getPinCode();
          row[6] = pi.isPatientIsNormal()?"Norm" :"AbNorm";
          model.addRow(row);
       }
//To change body of generated methods, choose Tools | Templates.
    }
    
    private int getPatientID(){
        
        
        
     
        int pID = 1;
        
        if(phistory.getPatientInfoHistory().size() >0){
            ArrayList<Integer> PtD = new ArrayList<Integer>();
            for (int x=0; x<phistory.getPatientInfoHistory().size(); x++){
                
                PtD.add(phistory.getPatientInfoHistory().get(x).getPatientId());
                        
            }
            Collections.sort(PtD);
            pID = PtD.get(PtD.size()-1)+ 1;
        }
        return pID;
    }
}